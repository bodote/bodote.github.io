<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-10-09T16:59:10+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Bodos Software Blog</title><subtitle>'Gedanken und Ideen zu Softwareentwicklung'</subtitle><author><name>Bodo Teichmann</name></author><entry><title type="html">TDD? aber richtig!</title><link href="http://localhost:4000/blog/TDD-aber-richtig/" rel="alternate" type="text/html" title="TDD? aber richtig!" /><published>2020-10-09T15:00:00+00:00</published><updated>2020-10-09T15:00:00+00:00</updated><id>http://localhost:4000/blog/TDD-aber-richtig</id><content type="html" xml:base="http://localhost:4000/blog/TDD-aber-richtig/">&lt;h1 id=&quot;was-ist-genautddund-warum-ist-dabeitest-firstso-wichtig&quot;&gt;Was ist genau »TDD« und warum ist dabei »Test First« so wichtig?&lt;/h1&gt;

&lt;p&gt;Vorweg eine Frage: Sind wir uns einig, dass Unittests mit angemessener
Testabdeckung sehr wünschenswert sind ? (Es geht hier zunächst mal nur
um Unittests, nicht um Integrationstests oder um Akzeptanztests oder der
gleichen)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Wenn ja: Gut, dann ist diese Hürde ja schon mal aus dem Weg geräumt.&lt;/li&gt;
  &lt;li&gt;Wenn nein, dann&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;…..&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;aber-was-genau-ist-hier-mitunittestsgemeint-&quot;&gt;Aber was &lt;strong&gt;GENAU&lt;/strong&gt; ist hier mit »Unittests« gemeint ??&lt;/h2&gt;

&lt;p&gt;Mit Unittests meine ich hier immer “White Box” - Tests und immer automatisiert.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Whiteboxtest: der, der den Test schreibt, plant oder kennt immer auch die Internas der Test-Classe(n) (andernfalls wäre es ja ein Black-Box-Test)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;testabdeckung-ist-sehr-wichtig-oder-doch-nicht-&quot;&gt;Testabdeckung ist sehr wichtig oder doch nicht ?&lt;/h2&gt;
&lt;p&gt;Ich halte die Testabdeckung im Sinn von ‘x %’ der Codezeilen ehr für fast nebensächlich. Auf keinen Fall darf sie als Hauptkriterium für die Qualität der Tests missverstanden werden. Ich kann dir mühelos eine 100% Testabdeckung erzielen ohne dass ich auch nur jemals einen Fehler damit finde.&lt;/p&gt;

&lt;h2 id=&quot;also-was-isttest-driven-developmenteigentlich-und-warum-ist-das-hilfreich&quot;&gt;Also was ist »Test Driven Development« eigentlich und warum ist das hilfreich?&lt;/h2&gt;
&lt;p&gt;Mit geht es hier um TDD im Sinne von z.B.  “&lt;a href=&quot;https://www.packtpub.com/product/test-driven-java-development-second-edition/9781788836111&quot;&gt;dem Buch Test Driven Java Development&lt;/a&gt;”.&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Nämlich: &lt;strong&gt;TEST FIRST&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;warum-isttest-firstso-wichtig-und-warum-isttest-lastso-viel-weniger-hilfreich&quot;&gt;Warum ist »Test First« so wichtig und warum ist »test last« so viel weniger hilfreich?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Test first&lt;/strong&gt; zwingt vor dem schreiben des eigentlich Code und der eigentelichen Unittests dazu,  sehr klar über die Anforderungen und das Softwaredesign (auf Klassen/Interface- Ebene) nachzudenken&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test first&lt;/strong&gt; trägt dann fast automatisch zu einer klareren Softwarearchitektur auf Klassen/Interface- Ebene bei.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test zuerst&lt;/strong&gt; zu schreiben geht nur , wenn ich genau die Anforderungen verstanden und wenn ich genau verstanden habe wie sich mein neuer Code in den bestehenden einfügen soll&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test first&lt;/strong&gt; Code braucht weniger spätes  Refactoring (also Refactoring dessen Notwendigkeit erst später offensichtlich wird)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test first&lt;/strong&gt; führt zu kleineren Klassen und Methoden, förder automatisch das &lt;a href=&quot;https://de.wikipedia.org/wiki/Single-Responsibility-Prinzip&quot;&gt;Single-Responsibility-Prinzip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test first&lt;/strong&gt; spart am Ende Zeit und liefert höhere Code-Qualität&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;warum-machen-das-dann-so-viele-entwickler-anders-und-schreiben-die-tests-erst-hinterher&quot;&gt;Warum machen das dann so viele Entwickler anders und schreiben die Tests erst hinterher?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Test first&lt;/strong&gt; - denken zu lernen ist schwer und kostet erstmal Zeit&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test first&lt;/strong&gt; lässt sich vor allem in altem Legacy-Code kaum nachträglich einführen und schon gar nicht kann man mit Legacy-Code neu lernen.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test first&lt;/strong&gt; spielt in der Ausbildung oder Studium nach wie vor kaum eine Rolle&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;beweise--beweise-&quot;&gt;Beweise , Beweise !&lt;/h1&gt;

&lt;p&gt;ok, beweisen im strengen Sinn lässt sich das vieleicht nicht ohne weiteres, aber es gibt doch eine größere Zahl an &lt;a href=&quot;../Literaturrecherche-TDD&quot;&gt;Vergleichsstudien zum Thema TDD&lt;/a&gt;!&lt;/p&gt;

&lt;h1 id=&quot;meine-persönliche-erfahrung-mit-tdd&quot;&gt;Meine persönliche Erfahrung mit TDD:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;es macht mir einfach viel mehr Spaß so zu programmieren&lt;/li&gt;
  &lt;li&gt;mit dem konsequenten “test first”-Ansatz von TDD ergibt sich ein
geringerer Zeitaufwand gegenüber nachträglich gebauten Unittests:
    &lt;ul&gt;
      &lt;li&gt;Weil ich dann während des Schreibens der eigentlichen
Klasse/Methode ja keine &lt;strong&gt;manuellen&lt;/strong&gt; Tests mehr mache.&lt;/li&gt;
      &lt;li&gt;Denn: wenn ich noch keinen Unittest habe, wie teste ich eine
Klasse/Methode die ich grad geschrieben oder verändert hat?
durch bloses hinschauen (ist fehleranfällig) oder durch
manuelles Testen, das kostet jedes mal wieder Zeit!&lt;/li&gt;
      &lt;li&gt;Weil ich gedanklich praktisch gleichzeitig eigentlichen Code und TestCode erfinde, ich bin also beim Schreiben des Tests schon gedanklich in der Thematik drin bin.&lt;/li&gt;
      &lt;li&gt;Schreibe ich dagegen den Unittest erst später, dann muss ich
mich ja ins Thema erst wieder neu eindenken. Schlimmstenfalls
müsste ich sogar meine Klassen/Methoden-Design ändern, was ich
natürlich im nach hinein eher nicht mehr mache.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ich habe keinen Zeitdruck mehr beim “nachziehen” von Test: leider ist es nicht selten, dass nachträglich geschriebene Unittests von mindere Qualität ist, obwohl doch die Testabdeckung-Metrik hoch ist, oder schlimmer, dass die Tests ganz “vergessen” werden, weil:
    &lt;ul&gt;
      &lt;li&gt;der Sprint schon vorbei ist&lt;/li&gt;
      &lt;li&gt;der PO oder der Kunden mit neuen Featurewünschen drängt&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Nochmal zur manchmal so heiligen &lt;strong&gt;Testabdeckung&lt;/strong&gt;: Ehrlich gesagt ist mir die komplett egal wenn ich “test first” mache ! Denn: ich weiß ja von vornherein, dass ich alle Methoden in allen Klassen, die auch nur minimale Logic enthalten, mit Unittests zu 100% abgedeckt habe. Ob die gesamte Testabdeckung dann bei 80, 90 oder 95 % liegt (weil halt Glue-Code ohne Logik und Setter/Getter nicht abgedeckt sind), ist doch dann komplett irrelevant.&lt;/li&gt;
  &lt;li&gt;Falls ich in meinen Unittests doch mal einen Fall vergessen habe, der dann im Integrationstest oder noch später aufgedeckt wird, dann und nur dann ziehe ich zuerst den Unittests nach und dann &lt;strong&gt;und erst da nach&lt;/strong&gt; fixe ich den eigentlichen Code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tddunittest-finde-ich-sehr-schwer-wenn--&quot;&gt;TDD/Unittest finde ich sehr schwer, wenn  …&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;wenn es schon nennenswert Codeteile gibt, die ohne Unittests sind&lt;/li&gt;
  &lt;li&gt;und wenn gerade diese Codeteile geändert werden müssen&lt;/li&gt;
  &lt;li&gt;wenn es nicht einfach möglich ist, neue Features mit komplett neuen Klassen/Modulen zur realisieren, sondern alte Klassen erweitert
werden müssen.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;denn-unter-solchen-widrigen-randbedingungen&quot;&gt;Denn unter solchen widrigen Randbedingungen..&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;..ist TDD extrem mühsam: ich muss mich in Codeteile von anderen Entwicklern reindenken, ohne Unittests und ohne Doku. Das ist das doppelt schwer&lt;/li&gt;
  &lt;li&gt;und sochen Randbedingungen ist TDD extrem zeitaufwändig ohne vor allem ohne unmittelbaren Gewinn für PO und Kunden.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Übrigens: das heißt dann logischerweise auch, dass es keinen Sinn macht TDD an einem Projekt mit kaum Unittests &lt;strong&gt;neu lernen&lt;/strong&gt; zu wollen. Denn das geht ziemlich sicher schief.&lt;/p&gt;

&lt;p&gt;Wer sich an so einem “dicken Brett” mit TDD versuchen will, der muss
schon sehr TDD-Sattelfest sein und die Randbedingungen (Zeit, Geld)
müssen außerdem sehr optimal sein.&lt;/p&gt;

&lt;h2 id=&quot;wo-ich-tdd-schwierig-finde-es-aber-gerne-besser-machen-möchte&quot;&gt;Wo ich TDD schwierig finde, es aber gerne besser machen möchte&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;bei (Script) - Code, der direkt auf betriebssystemnahen Funktionen
operiert&lt;/li&gt;
  &lt;li&gt;beim Testen von Networking oder bei DB- Code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also , wenn es nur schwer gelingt, die externen Objekte (z.B.
betriebssystemnahen Funktionen) sinnvoll zu mocken.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;…bin ich auch ratlos… &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Die Grundidee ist auch abseits von Java in anderen Programmiersprachen die gleiche. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Bodo Teichmann</name></author><category term="TDD" /><category term="Test Driven Development" /><summary type="html">Was ist genau »TDD« und warum ist dabei »Test First« so wichtig?</summary></entry><entry><title type="html">Literaturrecherche zu TDD</title><link href="http://localhost:4000/blog/Literaturrecherche-TDD/" rel="alternate" type="text/html" title="Literaturrecherche zu TDD" /><published>2020-09-18T19:34:30+00:00</published><updated>2020-09-18T19:34:30+00:00</updated><id>http://localhost:4000/blog/Literaturrecherche-TDD</id><content type="html" xml:base="http://localhost:4000/blog/Literaturrecherche-TDD/">&lt;p&gt;Dies ist &lt;strong&gt;KEINE&lt;/strong&gt; Linkliste zu TDD-Bücher, mit denen ich bei Amazon noch nebenher Affiliate-Provision kassieren möchte!&lt;/p&gt;

&lt;p&gt;Ich bin ja ein enthusuastischer Beführworter von Test Driven Design (TDD), insbesondere von dem “test first” Ansatz. Daher hat es mich einfach interessiert, was denn andere Autoren und auch (aber nicht nur) die wissenschaftliche Literatur zu dem Thema hergibt. Also habe ich gegoogelt, die Fundstellen studiert und die für jeweils wichtigsten Ergebnisse der jeweiligen Studien hier zusammengetragen.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Fussnote:&lt;/dt&gt;
  &lt;dd&gt;(Angeregt wurde ich dazu übrigens, als ich das Buch &lt;a href=&quot;https://langlebige-softwarearchitekturen.de&quot;&gt;Langlebige Softwarearchitekturen&lt;/a&gt; von Carola Lilienthal las. Sie hat nämlich an einige Stellen auf auf systematische Studien verwiesen, die Ihre jeweilige Aussagen im Buch belegen sollen. Übrigens schreibt sie auch sehr positiv über TDD in dem Buch, wie man hier gleich in der ersten Fundstelle sieht.)&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&quot;aus_langlebige_softwarearchitekturen&quot;&gt;Aus &lt;a href=&quot;https://langlebige-softwarearchitekturen.de&quot;&gt;Langlebige Softwarearchitekturen&lt;/a&gt;&lt;/h3&gt;

&lt;h4 id=&quot;abschnitt_9.1.1&quot;&gt;Abschnitt 9.1.1:&lt;/h4&gt;

&lt;p&gt;&quot;Für Klassen, die in Zyklen sind, existieren in den meisten Systemen
keine direkten Unit-Testklassen. Wollte man die Unit Tests programmieren, 
müsste man alle im Zyklus verflochtenen Klassen durch einen Mock
ersetzen oder Objekte von ihnen erzeugen. Das ist sehr viel Aufwand,
den die meisten Entwicklungsteams und Projektleiter scheuen.&quot;&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Bodos Kommentar:&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Ich hoffe, wir sind uns einig, dass Zyklen, egal ob auf
Modul/Package-Ebene oder auf Ebene von Klassen innerhalb eines
Packages böse sind. Daher:&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dd&gt;Das heißt im Umkehrschluss: wenn ich mit TDD anfange, kann mir das
nicht passieren. Im Gegenteil: TDD hindert mich direkt daran, solche
Fehler zu machen und zwingt mich, vor schreiben von Classen und
Methode mir Gedanken über die Microarchitektur (also die Architektur
von Klassen, die zu einem Bounded Context gehören, die zu einem
Package gehören oder sonst eng zusammengehören.)&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&quot;aus_test_driven_java_development___second_edition&quot;&gt;aus &lt;a href=&quot;https://www.packtpub.com/product/test-driven-java-development-second-edition/9781788836111&quot;&gt;Test-Driven Java Development - Second Edition&lt;/a&gt;&lt;/h3&gt;

&lt;h4 id=&quot;kapitel_1_abschnitt_why_tdd&quot;&gt;Kapitel 1 , Abschnitt &quot;Why TDD?&quot;:&lt;/h4&gt;

&lt;p&gt;&quot;It's not an easy thing to master TDD. Even after learning all the
theory and going through best practices and anti-patterns, the journey
is only just beginning. TDD requires time and a lot of practice. It's a
long trip that does not stop with this book. As a matter of fact, it
never truly ends. There are always new ways to become more proficient
and faster. However, even though the cost is high, the benefits are even
higher. &lt;strong&gt;People who have spent enough time with TDD claim that there is
no other way to develop a software.&lt;/strong&gt; We are one of them and we're sure
that you will be too.&quot;&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Bodos Kommentar:&lt;/dt&gt;
  &lt;dd&gt;den fett gedruckte Satz kann ich aus eigener Erfahrung bestätigen.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&quot;wissenschaftliche_studien_zu_tdd&quot;&gt;Wissenschaftliche oder zumindst systematische Studien zu TDD&lt;/h2&gt;

&lt;h3 id=&quot;assessing_test_driven_development_at_ibm&quot;&gt;&lt;a href=&quot;https://collaboration.csc.ncsu.edu/laurie/Papers/MAXIMILIEN_WILLIAMS.PDF&quot;&gt;Assessing test-driven development at IBM&lt;/a&gt;:&lt;/h3&gt;

&lt;p&gt;“… we reduced our &lt;strong&gt;defect rate by about 50 percent&lt;/strong&gt; compared to a
similar system that was built using an ad-hoc unit testing approach. The
project completed on time with &lt;strong&gt;minimal development productivity impact.&lt;/strong&gt;
Additionally, the suite of automated unit test cases created via TDD is
a reusable and extendable asset that will continue to improve quality
over the lifetime of the software system. The test suite &lt;strong&gt;will be the basis for quality checks&lt;/strong&gt; 
and will serve as a quality contract between all members of the team.”&lt;/p&gt;

&lt;h3 id=&quot;evaluating_the_efficacy_of_test_driven_development_industrial_case_studies_microsoft&quot;&gt;&lt;a href=&quot;https://d1wqtxts1xzle7.cloudfront.net/36509027/fp17288-bhat.pdf?1423032149=&amp;amp;response-content-disposition=inline%3B+filename%3DEvaluating_the_Efficacy_of_Test_Driven_D.pdf&amp;amp;Expires=1599907639&amp;amp;Signature=RuaKEjh7AbrkimLa5LGjb6zOpojv18srJrYQO7ONLNjWm586g6nxlDjGnYgubwIFYYp5fNkQulFn6YD3wpvud5bBhvwkO4nOOFMYyhATLdvHjHtW3vzm6ncsuqgwYTIKtrxbxAd7lQiEiue~D300FsgSLK6ZUk9DOssTqS0NZry6syc9I6IQYR6H2BRcnzf9oxvCTBWPzjSEBPi2cqYpyKbF1Y322XtLj7fdNTu8IVkmUULxwH3R1GVsEZrdpOAOJpM0b1ZAsJZEI0K3hiv~ENiV79hUjoyRu5xLaDeDWA4Nhg4Q-J8Zu8UQ18hQEjl0dOZnq7o4Xq~2-8jbuzDxIQ__&amp;amp;Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA&quot;&gt;Evaluating the Efficacy of Test-Driven Development: Industrial Case Studies (Microsoft)&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2,6-4,2 mal mehr Bugs , wenn KEIN TDD verwendet. oder anders
gerechnet Bugrate sinkt mit TDD um 62%-77% .&lt;/li&gt;
  &lt;li&gt;15% -35% mehr Zeit für TDD notwendig.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;” The results summarized … indicate that while the development of
both the systems utilizing TDD took extra time upfront the resulting
quality was higher than teams that adopted a non-TDD approach by an
order of at least two times. “&lt;/p&gt;

&lt;h3 id=&quot;metastudie_does_test_driven_development_really_improve_software_design_quality&quot;&gt;Metastudie, die 6 unterschiedliche Studien ausgewertet hat: &lt;a href=&quot;https://digitalcommons.calpoly.edu/cgi/viewcontent.cgi?article=1027&amp;amp;context=csse_fac&quot;&gt;Does Test-Driven Development Really Improve Software Design Quality?&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;“… Our results indicate that &lt;strong&gt;test-first programmers&lt;/strong&gt; are more likely
to write software in more and smaller units that are &lt;strong&gt;less complex and more highly tested&lt;/strong&gt; ….”&lt;/p&gt;

&lt;h3 id=&quot;an_experimental_evaluation_of_the_effectiveness_and_efficiency_of_the_test_driven_development&quot;&gt;&lt;a href=&quot;https://ieeexplore.ieee.org/abstract/document/4343756&quot;&gt;An Experimental Evaluation of the Effectiveness and Efficiency of the Test Driven Development&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;“Our results suggest that TDD helps in reducing overall development
effort and improving developer’s productivity whereas the code quality
seems to be affected by the actual testing efforts applied during a
development-style.”&lt;/p&gt;

&lt;h3 id=&quot;metastudie_how_effective_is_test_driven_development&quot;&gt;Metastudie: &lt;a href=&quot;https://www.researchgate.net/profile/Burak_Turhan/publication/258126622_How_Effective_is_Test_Driven_Development/links/54e794320cf27a6de10a8afe/How-Effective-is-Test-Driven-Development.pdf&quot;&gt;How Effective is Test-Driven Development?&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;“Is it for everyone?”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“One basic fact on which almost everyone agrees is that &lt;strong&gt;TDD is difficult to learn&lt;/strong&gt;. It involves a steep learning curve that requires skill,
maturity, and time, particularly when developers are entrenched in the
code-then-test paradigm. Better tool support for test-case generation
and early exposure in the classroom to a test-then-code mentality may
encourage TDD adoption.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“Could it be addictive?”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“Personal communications with TDD developers suggest that it is an
addictive practice. It changes the way people think and their approach
to coding in a way that is difficult to roll back. Therefore, leaving
TDD practices may be as difficult as adopting them.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fazit: Empfehlung für TDD&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;comparing_the_defect_reduction_benefits_of_..._test_driven_development&quot;&gt;&lt;a href=&quot;http://ibiai.mg.gov.br/wp-content/uploads/2019/08/05750007-1.pdf&quot;&gt;Comparing the Defect Reduction Benefits of ... Test-Driven Development&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;“TDD has several purported benefits—only one of which is software
defect reduction … We found that code inspection is more effective
than TDD at reducing defects, but that code inspection is also more
expensive to implement. We also found some evidence to indicate that TDD
may result in an implementation cost savings, …”&lt;/p&gt;

&lt;h3 id=&quot;test_driven_development&quot;&gt;&lt;a href=&quot;https://link.springer.com/book/10.1007%2F978-3-642-04288-1&quot;&gt;Test-Driven Development&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Empirical studies by Madeyski (Madeyski, 2010a) showed that TDD is
&lt;strong&gt;better&lt;/strong&gt; in producing &lt;strong&gt;loosely coupled&lt;/strong&gt; software in comparison with
traditional test last software development practice.&lt;/p&gt;</content><author><name>Bodo Teichmann</name></author><category term="TDD" /><category term="Test Driven Design" /><summary type="html">Dies ist KEINE Linkliste zu TDD-Bücher, mit denen ich bei Amazon noch nebenher Affiliate-Provision kassieren möchte!</summary></entry><entry><title type="html">(Video)Test Driven Development und Test-First Tutorial</title><link href="http://localhost:4000/blog/TDD-Tutorial/" rel="alternate" type="text/html" title="(Video)Test Driven Development und Test-First Tutorial" /><published>2020-09-10T19:34:30+00:00</published><updated>2020-09-10T19:34:30+00:00</updated><id>http://localhost:4000/blog/TDD-Tutorial</id><content type="html" xml:base="http://localhost:4000/blog/TDD-Tutorial/">&lt;p&gt;Nach wie vor aktuell: Mein Tutorial zu Test Driven Development und Test-First&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;

&lt;div class=&quot;responsive-video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/8v4PixvHk18&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/div&gt;</content><author><name>Bodo Teichmann</name></author><category term="TDD" /><category term="Test Driven Design" /><summary type="html">Nach wie vor aktuell: Mein Tutorial zu Test Driven Development und Test-First</summary></entry></feed>